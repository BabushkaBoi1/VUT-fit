-- 4. část - SQL skript pro vytvoření pokročilých objektů schématu databáze
-- authoři: Vojtěch Hájek (xhajek51)
--          Tomáš Polívka (xpoliv06)
-- zadaní:  č.51 – Liga Elektronického sportu

-- odstranění tabulek
DROP TABLE hrac_hra;
DROP TABLE sponzor_turnaj;
DROP TABLE organizator_turnaj;
DROP TABLE tym_turnaj;
DROP TABLE herni_mod;
DROP TABLE statistiky;
DROP TABLE zapasy;
DROP TABLE vybaveni;
DROP TABLE hra;
DROP TABLE hrac;
DROP TABLE zeme;
DROP TABLE klan;
DROP TABLE turnaje;
DROP TABLE tym;
DROP TABLE organizator;
DROP TABLE sponzori;


DROP sequence zeme_squence;
-- vytvoření tabulek
CREATE TABLE hrac (
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    prezdivka       VARCHAR2(100) NOT NULL,
    heslo           VARCHAR2(255)  NOT NULL,
    jmeno           VARCHAR2(100) NOT NULL,
    prijmeni        VARCHAR2(100) NOT NULL,
    email           VARCHAR(255) NOT NULL,
    datum_narozeni  DATE NOT NULL,
    id_zeme         NUMBER,
    id_klan         NUMBER,
    pozice_v_klanu  VARCHAR2(100),
    id_tym          NUMBER
);

CREATE TABLE klan(
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    nazev_klanu     VARCHAR2(100) NOT NULL,
    datum_vytvoreni DATE NOT NULL,
    logo            VARCHAR2(10),
    hymna           VARCHAR2(100)
);

CREATE TABLE zeme(
    id              NUMBER NOT NULL PRIMARY KEY,
    nazev           VARCHAR2(100) NOT NULL,
    zkratka         VARCHAR2(3) NOT NULL
);

CREATE TABLE tym(
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    nazev           VARCHAR2(100) NOT NULL
    );

CREATE TABLE vybaveni(
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    durh            VARCHAR2(100) NOT NULL,
    znacka          VARCHAR2(100),
    cena            NUMBER,
    popis           VARCHAR2(500),
    id_hrac         NUMBER
);

CREATE TABLE hra(
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    nazev           VARCHAR2(100) NOT NULL,
    popis           VARCHAR2(500),
    zkratka         VARCHAR2(15),
    herni_zanr      VARCHAR2(100),
    datum_vydani    DATE NOT NULL
);

CREATE TABLE hrac_hra(
    id_hrac NUMBER NOT NULL,
    id_hra  NUMBER
);

CREATE TABLE turnaje(
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    nazev           VARCHAR2(100) NOT NULL,
    datum_zacatek   DATE NOT NULL,
    datum_konec     DATE NOT NULL
);

CREATE TABLE tym_turnaj(
    id_tym          NUMBER,
    id_turnaj       NUMBER
);

CREATE TABLE sponzori(
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    nazev           VARCHAR2(100) NOT NULL,
    zkratka         VARCHAR2(10) NOT NULL
);

CREATE TABLE sponzor_turnaj(
    id_sponzor      NUMBER,
    id_turnaj       NUMBER
);

CREATE TABLE organizator(
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    nazev           VARCHAR2(100) NOT NULL,
    zkratka         VARCHAR2(10) NOT NULL
);

CREATE TABLE organizator_turnaj(
    id_organizator  NUMBER NOT NULL,
    id_turnaj       NUMBER
);

CREATE TABLE zapasy(
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    druh_zapasu     VARCHAR2(100) NOT NULL,
    vysledek        VARCHAR2(100),
    id_turnaj       NUMBER,
    id_hra          NUMBER
);

CREATE TABLE statistiky(
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    pocet_zabiti    NUMBER,
    poskozeni       NUMBER,
    skore           NUMBER,
    pocet_umrti     NUMBER,
    id_zapas        NUMBER
);

CREATE TABLE herni_mod(
    id              NUMBER GENERATED BY DEFAULT as IDENTITY PRIMARY KEY,
    nazev           VARCHAR2(100) NOT NULL,
    popis           VARCHAR2(500),
    zkratka         VARCHAR2(10) NOT NULL,
    herni_zanr      VARCHAR2(100) NOT NULL,
    datum_vydani    DATE NOT NULL,
    id_hra          NUMBER
);


-- foregin keys
ALTER TABLE hrac ADD (
    CONSTRAINT fk_hrac_zeme FOREIGN KEY (id_zeme) REFERENCES zeme(id),
    CONSTRAINT fk_hrac_klan FOREIGN KEY (id_klan) REFERENCES klan(id),
    CONSTRAINT fk_hrac_tym FOREIGN KEY (id_tym) REFERENCES tym(id)
    );
ALTER TABLE vybaveni ADD CONSTRAINT fk_vybaveni_hrac FOREIGN KEY (id_hrac) REFERENCES hrac(id);
ALTER TABLE hrac_hra ADD (
    CONSTRAINT "hrac_hra_pk" PRIMARY KEY (id_hra, id_hrac),
    CONSTRAINT fk_hrac FOREIGN KEY (id_hrac) REFERENCES hrac(id),
    CONSTRAINT fk_hra FOREIGN KEY (id_hra) REFERENCES hra(id)
    );

ALTER TABLE zapasy ADD (
    CONSTRAINT fk_zapas_turnaj FOREIGN KEY (id_turnaj) REFERENCES turnaje(id),
    CONSTRAINT fk_zapas_hra FOREIGN KEY (id_hra) REFERENCES hra(id)
    );
ALTER TABLE herni_mod ADD CONSTRAINT fk_herni_mod_hra FOREIGN KEY (id_hra) REFERENCES hra(id);
ALTER TABLE statistiky ADD CONSTRAINT fk_statistika_zapas FOREIGN KEY (id_zapas) REFERENCES zapasy(id);
ALTER TABLE organizator_turnaj ADD (
    CONSTRAINT "organizator_turnaj_pk" PRIMARY KEY (id_organizator, id_turnaj),
    CONSTRAINT fk_organizator FOREIGN KEY (id_organizator) REFERENCES organizator(id),
    CONSTRAINT fk_turnaj FOREIGN KEY (id_turnaj) REFERENCES turnaje(id)
    );

ALTER TABLE sponzor_turnaj ADD (
    CONSTRAINT "sponzor_turnaj_pk" PRIMARY KEY (id_sponzor, id_turnaj),
    CONSTRAINT fk_turnaj0 FOREIGN KEY (id_turnaj) REFERENCES turnaje(id),
    CONSTRAINT fk_sponzor FOREIGN KEY (id_sponzor) REFERENCES sponzori(id)
    );
ALTER TABLE tym_turnaj ADD (
    CONSTRAINT "tym_turnaj_pk" PRIMARY KEY (id_tym, id_turnaj),
    CONSTRAINT fk_turnaj1 FOREIGN KEY (id_turnaj) REFERENCES turnaje(id),
    CONSTRAINT fk_tym FOREIGN KEY (id_tym) REFERENCES tym(id)
    );

----------------------------------------------------------------------------
--- Triggery

--- Trigger kontroluje zda byl email zadán správně, pokud ne, vyskočí error
CREATE OR REPLACE trigger trigger_email
    AFTER INSERT OR UPDATE ON hrac
    FOR EACH ROW
BEGIN
    IF  NOT REGEXP_LIKE(:new.email, '^[a-zA-Z0-9.]*@[a-zA-Z0-9.-]+.[a-z]{2,}$', 'i') THEN
        RAISE_APPLICATION_ERROR(-20111, 'error: chybně zadán email');
    end if;
end;
/

CREATE SEQUENCE zeme_squence;

--- Trigger přiřazuje id hráče
CREATE OR REPLACE TRIGGER trigger_idzeme
  BEFORE INSERT ON zeme
  FOR EACH ROW
  WHEN ( new.id IS NULL )
BEGIN
  :new.id := zeme_squence.nextval;
END;
/


----------------------------------------------------------------------------

-- vkládání dat
-- předvedení Triggeru trigger_idzeme
INSERT INTO zeme(id, nazev, zkratka) VALUES (null, 'Česká Republika', 'CZE');
INSERT INTO zeme(id, nazev, zkratka) VALUES (null, 'Slovenská Republika', 'SVK');
INSERT INTO zeme(id, nazev, zkratka) VALUES (null, 'Spojené státy Americké', 'USA');
INSERT INTO zeme(id, nazev, zkratka) VALUES (null, 'Kanada', 'CAN');
INSERT INTO zeme(id, nazev, zkratka) VALUES (null, 'Velká Británie', 'UK');
INSERT INTO zeme(id, nazev, zkratka) VALUES (null, 'Poslko', 'POL');
INSERT INTO zeme(id, nazev, zkratka) VALUES (null, 'Německo', 'GER');

INSERT INTO klan(nazev_klanu, datum_vytvoreni, logo, hymna) VALUES ('FATE GAMING LCC', DATE '2010-01-10', '', '');
INSERT INTO klan(nazev_klanu, datum_vytvoreni, logo, hymna) VALUES ('WINTER CLAN', DATE '2009-08-09', '', '');
INSERT INTO klan(nazev_klanu, datum_vytvoreni, logo, hymna) VALUES ('DOMINIK KLAN', DATE '2011-01-11', '', '');

INSERT INTO tym (nazev) VALUES ('Optic Texas');
INSERT INTO tym (nazev) VALUES ('Faze Atlanta');
INSERT INTO tym (nazev) VALUES ('Toronto Ultra');

-- předvedení Triggeru trigger_email
INSERT INTO hrac(prezdivka, heslo, jmeno, prijmeni, email, datum_narozeni, id_zeme, id_klan, pozice_v_klanu, id_tym) VALUES ('Gotom', '6e017b5464f820a6c1bb5e9f6d711a667a80d8ea', 'Tomáš', 'Polívka', 'tom@email.cz', DATE '2001-03-28', 1, 1, 'hrac', 1);
INSERT INTO hrac(prezdivka, heslo, jmeno, prijmeni, email, datum_narozeni, id_zeme, id_klan, pozice_v_klanu, id_tym) VALUES ('HusKerrs', '6e017b5464f820a6c1bb5e9f6d711a667a80d8ea', 'Jordan', 'Thomas', 'Jordan@Thomas9.com', DATE '1995-10-04', 3, 1, 'hrac', 1);
INSERT INTO hrac(prezdivka, heslo, jmeno, prijmeni, email, datum_narozeni, id_zeme, id_klan, pozice_v_klanu, id_tym) VALUES ('Aydan', '6e017b5464f820a6c1bb5e9f6d711a667a80d8ea', 'Aydan', 'Conrad', '6Aydan@Conrad.de', DATE '1999-04-20', 3, 1, 'vedoucí klanu', 1);
INSERT INTO hrac(prezdivka, heslo, jmeno, prijmeni, email, datum_narozeni, id_zeme, id_klan, pozice_v_klanu, id_tym) VALUES ('Tommey', '6e017b5464f820a6c1bb5e9f6d711a667a80d8ea', 'Thomas', 'Trewen', 'Twich@Hajek.Tv', DATE '1992-09-07', 4, 1, 'hrac', 1);

INSERT INTO hra(nazev, popis, zkratka, herni_zanr, datum_vydani) VALUES ('Call of Duty: Warzone', '', 'Warzone', 'Battle Royale', DATE '2020-03-10');
INSERT INTO hra(nazev, popis, zkratka, herni_zanr, datum_vydani) VALUES ('League of Legends', '', 'LOL', 'Multiplayer online battle arena', DATE '2009-08-15');

INSERT INTO hrac_hra(id_hrac, id_hra) VALUES (1, 1);
INSERT INTO hrac_hra(id_hrac, id_hra) VALUES (1, 2);
INSERT INTO hrac_hra(id_hrac, id_hra) VALUES (2, 1);
INSERT INTO hrac_hra(id_hrac, id_hra) VALUES (3, 1);
INSERT INTO hrac_hra(id_hrac, id_hra) VALUES (4, 1);

INSERT INTO vybaveni(durh, znacka, cena, popis, id_hrac) VALUES ('monitor', 'Acer', '43890', 'Acer Predator X35 - LED monitor 35" ', 2);
INSERT INTO vybaveni(durh, znacka, cena, popis, id_hrac) VALUES ('grafická karta', 'Nvidia', '16790', 'GIGABYTE GeForce RTX 3060 ELITE 12G (rev. 2.0), LHR, 12GB GDDR6', 2);
INSERT INTO vybaveni(durh, znacka, cena, popis, id_hrac) VALUES ('herni zidle', 'CZC.gaming', '3990', 'CZC.Gaming Bastion, herní židle, černá/červená', 2);
INSERT INTO vybaveni(durh, znacka, cena, popis, id_hrac) VALUES ('herni mys', 'Razer', '3807', 'Razer Naga Pro Wireless, černá', 3);
INSERT INTO vybaveni(durh, znacka, cena, popis, id_hrac) VALUES ('zdroj', 'Asus', '4699', 'ASUS ROG THOR 850P - 850W ', 3);
INSERT INTO vybaveni(durh, znacka, cena, popis, id_hrac) VALUES ('herni klavesnice', 'Corsair', '4990', 'Corsair K95 PLATINUM XT, Cherry MX Speed Silver, US', 2);

INSERT INTO herni_mod(nazev, popis, zkratka, herni_zanr, datum_vydani, id_hra) VALUES ('ARAM', 'ARAM (or All Random All Mid) is a game mode in League of Legends in a 5v5 format on the Howling Abyss icon.png Howling Abyss with the objective to destroy the opposing team''s nexus. It was released on June 29, 2012. Players are given random champions from the available champion pool and are able to trade or reroll their picks.', 'ARAM', 'Multiplayer online battle arena', DATE '2009-06-09', 2);
INSERT INTO herni_mod(nazev, popis, zkratka, herni_zanr, datum_vydani, id_hra) VALUES ('Rebirth ', 'Rebirth Island is a Battle Royale map available for Call of Duty: Warzone and it was release in December 16th, 2020 as part of Season One of content for Call of Duty: Black Ops Cold War. [1] ', 'Rebirth', 'Battle Royale', DATE '2020-12-06', 1);

INSERT INTO turnaje(nazev, datum_zacatek, datum_konec) VALUES ('CDL - Major I', DATE '2022-02-20', DATE '2022-02-22');
INSERT INTO turnaje(nazev, datum_zacatek, datum_konec) VALUES ('CDL - Major II', DATE '2022-03-20', DATE '2022-03-22');

INSERT INTO zapasy(druh_zapasu, vysledek, id_turnaj, id_hra) VALUES ('Scrims', '2:3', NULL, 1);
INSERT INTO zapasy(druh_zapasu, vysledek, id_turnaj, id_hra) VALUES ('Semifinal', '3:1', 1, 2);
INSERT INTO zapasy(druh_zapasu, vysledek, id_turnaj, id_hra) VALUES ('Semifinal', '1:3', 1, 2);
INSERT INTO zapasy(druh_zapasu, vysledek, id_turnaj, id_hra) VALUES ('Final', '0:3', 1, 2);

INSERT INTO statistiky(pocet_zabiti, poskozeni, skore, pocet_umrti, id_zapas) VALUES (40, 24823, NULL, 40, 1);
INSERT INTO statistiky(pocet_zabiti, poskozeni, skore, pocet_umrti, id_zapas) VALUES (35, 20823, NULL, 36, 2);
INSERT INTO statistiky(pocet_zabiti, poskozeni, skore, pocet_umrti, id_zapas) VALUES (34, 22823, NULL, 35, 3);
INSERT INTO statistiky(pocet_zabiti, poskozeni, skore, pocet_umrti, id_zapas) VALUES (50, 28823, NULL, 50, 4);

INSERT INTO sponzori(nazev, zkratka) VALUES ('G FUEL', 'G FUEL');
INSERT INTO sponzori(nazev, zkratka) VALUES ('Big shock energy drink!', 'BIG SHOCK!');

INSERT INTO organizator(nazev, zkratka) VALUES ('Mirek Polívka', 'Mirek');
INSERT INTO organizator(nazev, zkratka) VALUES ('Michal Polívka', 'Michal');

INSERT INTO sponzor_turnaj(id_sponzor, id_turnaj) VALUES (1,2);
INSERT INTO sponzor_turnaj(id_sponzor, id_turnaj) VALUES (1,1);
INSERT INTO sponzor_turnaj(id_sponzor, id_turnaj) VALUES (2,2);

INSERT INTO organizator_turnaj(id_organizator, id_turnaj) VALUES (1,1);
INSERT INTO organizator_turnaj(id_organizator, id_turnaj) VALUES (1,2);


----------------------------------------------------------------------------

--- Procedury

-- Procedura pro výpočet procentuální hranosti jednotlivých her
CREATE OR REPLACE PROCEDURE prec_playersofgame (game IN VARCHAR2)
IS
   CURSOR cursor_hra IS SELECT * FROM hrac_hra JOIN hra ON hra.id = hrac_hra.id_hra;
       tmp cursor_hra%rowtype;
       percentage NUMBER;
       game_players NUMBER;
       all_players NUMBER;
BEGIN
    -- inicializování výchozích hodnot
    percentage := 0;
    game_players := 0;
    all_players := 0;
    OPEN cursor_hra;

    -- načtení hodnot do proměnných
    LOOP
        FETCH cursor_hra INTO tmp;
        EXIT WHEN cursor_hra%NOTFOUND;

        IF (tmp.id_hrac IS NOT NULL) THEN
            all_players := all_players + 1;
        END IF;
        IF (tmp.nazev = game) THEN
            game_players := game_players + 1;
        END IF;
    END LOOP;

    -- výpočet procent
    percentage := game_players / all_players;
    percentage := percentage * 100;
    CLOSE cursor_hra;

    -- výpis
    DBMS_OUTPUT.PUT_LINE('Procento hráčů, který hrajou hru ' || game || ' je: ' || percentage || ' % ');

EXCEPTION
   WHEN ZERO_DIVIDE THEN
        DBMS_OUTPUT.PUT_LINE('Nebyly nalezeni hráči co hrajou tuto hru');
   WHEN OTHERS THEN
      dbms_output.put_line( SQLERRM );
END;
/
-- ukázka procedury
BEGIN
    prec_playersofgame('League of Legends');
END;
/



-- Procedura pro výpočet procentuálního zastoupení hráčů dané země, kteří jsou v daném týmu
CREATE OR REPLACE PROCEDURE prec_playersfromcountry (country IN VARCHAR2, team IN VARCHAR2)
IS
    CURSOR cursor_zeme IS SELECT zeme.nazev FROM zeme JOIN hrac ON hrac.id_zeme = zeme.id JOIN tym ON hrac.id_tym = tym.id WHERE tym.nazev = team;
    tmp cursor_zeme%rowtype;
    percentage NUMBER;
    players_team NUMBER;
    players_country NUMBER;
BEGIN
    percentage := 0;
    players_team := 0;
    players_country := 0;
    OPEN cursor_zeme;
    -- načtení hodnot do proměnných
    LOOP
        FETCH cursor_zeme INTO tmp;
        EXIT WHEN cursor_zeme%NOTFOUND;

        players_team := players_team + 1;
        IF (tmp.nazev = country) THEN
            players_country := players_country + 1;
        END IF;
    END LOOP;
    -- výpočet procent
    percentage := players_country / players_team;
    percentage := percentage * 100;
    CLOSE cursor_zeme;

    -- výpis
    DBMS_OUTPUT.PUT_LINE('Procento hráčů pocházející ze země ' || country || ' v týmu ' || team || ' je: ' || percentage || '%');

EXCEPTION
   WHEN ZERO_DIVIDE THEN
        DBMS_OUTPUT.PUT_LINE('V týmu není žádný hráč');
   WHEN OTHERS THEN
      dbms_output.put_line( SQLERRM );

END;
/
BEGIN
    prec_playersfromcountry('Česká Republika', 'Optic Texas');
END;
/

----------------------------------------------------------------------------

--- EXPLAIN PLAN

--- explain plan pro výpis hráče jeho počtu kusů vybavení a cena, kterou za vybavení utratil

EXPLAIN PLAN FOR
SELECT hrac.prezdivka PREZDIVKA, COUNT(vybaveni.id) POCET_KUSU, SUM(vybaveni.cena) POCET_HRACU FROM hrac, vybaveni WHERE hrac.id = vybaveni.id_hrac GROUP BY prezdivka;

SELECT PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY());

-- vytvoření indexu pro vybavení
CREATE INDEX vybaveni_index ON vybaveni (id, cena);

--- explain plan pro výpis s indexem
EXPLAIN PLAN FOR
SELECT hrac.prezdivka PREZDIVKA, COUNT(vybaveni.id) POCET_KUSU, SUM(vybaveni.cena) POCET_HRACU FROM hrac, vybaveni WHERE hrac.id = vybaveni.id_hrac GROUP BY prezdivka;

SELECT PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY());

DROP INDEX vybaveni_index;

----------------------------------------------------------------------------
-- přidělení práv pro druhého člena týmu
GRANT ALL ON hrac TO XPOLIV06;
GRANT ALL ON tym TO XPOLIV06;


-- vytvoření materializovaného pohledu
CREATE MATERIALIZED VIEW hrac_info
AS SELECT prezdivka, jmeno, prijmeni, nazev TYM FROM hrac JOIN tym ON tym.id = hrac.id_tym;

-- přidělení práv pro druhého člena týmu
GRANT ALL ON hrac_info TO XPOLIV06;

SELECT * FROM hrac_info;
